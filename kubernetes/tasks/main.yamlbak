- name: 配置hosts
  template: src=hosts.j2 dest=/etc/hosts
- name: SELINUX=disabled
  selinux: state=disabled
- name: firewalld stop
  shell: systemctl stop firewalld;systemctl disable firewalld
- name: swapoff
  shell: swapoff -a;sed -i 's@^/dev/mapper/cl_fedora-swap none                    swap    defaults        0 0@#&@' /etc/fstab
- name:
  shell: modprobe br_netfilter;echo "modprobe br_netfilter" >> /etc/profile
- name:
  copy: src=kubernetes.conf dest=/etc/sysctl.d/kubernetes.conf
- name: 
  yum: name=yum-utils state=latest
- name:
  shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
- name:
  shell: yum install -y  device-mapper-persistent-data lvm2 wget net-tools nfs-utils lrzsz gcc gcc-c++ make cmake libxml2-devel openssl-devel curl curl-devel unzip sudo libaio-devel wget vim ncurses-devel autoconf automake zlib-devel epel-release openssh-server socat  ipvsadm conntrack  telnet ipvsadm
- name: 配置kubernetes国内源
  copy: src=kubernetes.repo dest=/etc/yum.repos.d/kubernetes.repo
- name: 
  shell: yum clean all;yum makecache
- name: 配置时间同步
  shell: yum install -y chrony
- name: 修改chrony配置
  shell: sed -i 's/#pool 2.centos.pool.ntp.org iburst/server ntp1.aliyun.com iburst\nserver ntp2.aliyun.com iburst\nserver ntp3.aliyun.com iburst/g' /etc/chrony.conf
- name: restart chrony
  service: name=chronyd state=restarted
- name: enable chronyd 
  shell: systemctl enable chronyd
- name: 安装containerd服务
  yum: name=containerd.io-1.6.6 state=present
- name: 
  shell: containerd config default > /etc/containerd/config.toml
- name: 
  shell: sed -i 's#SystemdCgroup = false#SystemdCgroup = true#' /etc/containerd/config.toml
- name:
  shell: sed -i 's#sandbox_image = "k8s.gcr.io/pause:3.6"#sandbox_image="registry.aliyuncs.com/google_containers/pause:3.7"#' /etc/containerd/config.toml
- name: 启动containerd服务
  service: name=containerd state=started enabled=yes
- name: 
  copy: src=crictl.yaml    dest=/etc/crictl.yaml
  notify: restart containerd
- name:  安装docker-ce
  yum: name=docker-ce state=present
- name: 目录不存在则创建
  file: path=/etc/docker state=directory
- name: 配置docker镜像加速
  copy: src=daemon.json dest=/etc/docker/daemon.json
  notify: restart docker
- name: 启动docker并开机自动启动
  shell: systemctl enable docker --now
- name:
  shell: sed -i 's#config_path = ""#config_path = "/etc/containerd/certs.d"#' /etc/containerd/config.toml
- name:
  shell: mkdir -p /etc/containerd/certs.d/docker.io/
- name:
  copy: src=hosts.toml dest=/etc/containerd/certs.d/docker.io/hosts.toml
  notify: restart containerd
- name: install kubernetes
  shell: yum install -y kubelet-1.25.0 kubeadm-1.25.0 kubectl-1.25.0
- name:
  shell: systemctl enable kubelet
- name:
  shell: crictl config runtime-endpoint /run/containerd/containerd.sock
- name: tasks for master01
  block:
    - name:
      shell: kubeadm config print init-defaults > kubeadm.yaml
    - name:
      shell: |
        sed -i -e 's#advertiseAddress: 1.2.3.4#advertiseAddress: 172.16.37.130#' -e 's#name: node#name: master01#' -e 's#imageRepository: registry.k8s.io#imageRepository: registry.cn-hangzhou.aliyuncs.com/google_containers#' kubeadm.yaml
    - name: 
      shell: |
        sed  -i '/  dnsDomain: cluster.local/a\  podSubnet: 10.244.0.0/16' kubeadm.yaml
    - name:
      shell: |
        cat <<EOL >> kubeadm.yaml
        ---
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        kind: KubeProxyConfiguration
        mode: ipvs
        ---
        apiVersion: kubelet.config.k8s.io/v1beta1
        kind: KubeletConfiguration
        cgroupDriver: systemd
        EOL
    - name:
      shell: kubeadm init --config=kubeadm.yaml --ignore-preflight-errors=SystemVerification
    - name:
      shell: |
        mkdir -p $HOME/.kube;sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config;sudo chown $(id -u):$(id -g) $HOME/.kube/config
  when: "ansible_nodename == 'master01' and ansible_ens160.ipv4.address == '172.16.37.130'"
- name: Tasks for node01和node02
  block:
    - name: Get the join command from master01 on behalf of nodes
      command: kubeadm token create --print-join-command
      register: join_command_output
      delegate_to: master01
    - name: join the kubernetes cluster
      command: "{{ join_command_output.stdout }}"
  when: "ansible_nodename in ['node01', 'node02']"
  #- name:
  #  debug: var=join_command_output
  #  when: "ansible_nodename == 'master01' and ansible_ens160.ipv4.address == '172.16.37.130'"
- name:  tasks for master01
  block:
    - name: 下载calico
      shell: wget https://docs.projectcalico.org/manifests/calico.yaml
    - name: 安装calico
      shell: kubectl apply -f  calico.yaml
    - name:  查看系统组建
      shell: kubectl get pod -n kube-system
    - name: 给node节点打标签
      shell: kubectl label nodes node01 node-role.kubernetes.io/work=work;kubectl label nodes node02 node-role.kubernetes.io/work=work
  when: "ansible_nodename == 'master01' and ansible_ens160.ipv4.address == '172.16.37.130'"
    
